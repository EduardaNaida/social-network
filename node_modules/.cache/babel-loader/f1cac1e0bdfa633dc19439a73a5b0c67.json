{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\";\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    let response = await authAPI.authMe();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      console.log(id, email, login);\n      dispatch(setUserData(id, email, login, true));\n    }\n\n    ;\n  };\n};\nexport const login = (email, password, rememberMe, captcha) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe, captcha).then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n      } else {\n        if (res.data.messages.length > 0) {\n          dispatch(stopSubmit('email', {\n            _error: res.data.messages\n          }));\n        }\n      }\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    authAPI.logout().then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setUserData(null, null, null, false));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/authReducer.ts"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setUserData","getAuthUserData","dispatch","response","authMe","data","resultCode","console","log","password","rememberMe","captcha","then","res","messages","length","_error","logout"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,SAAQC,UAAR,QAAyB,YAAzB;AAKA,MAAMC,aAAa,GAAG,oBAAtB;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,EAAE,EAAE,IADe;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAAsF;AAAA,MAArFC,KAAqF,uEAA/DN,YAA+D;AAAA,MAAjDO,MAAiD;;AAC/G,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAEL,WAAGC,MAAM,CAACE;AAFL,OAAP;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVM;AAYP,OAAO,MAAMI,WAAW,GAAG,CAACT,EAAD,EAAoBC,KAApB,EAA0CC,KAA1C,EAAgEC,MAAhE,MAAqF;AAC5GI,EAAAA,IAAI,EAAET,aADsG;AAE5GU,EAAAA,OAAO,EAAE;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAFmG,CAArF,CAApB;AAOP,OAAO,MAAMO,eAAe,GAAG,MAAM;AACnC,SAAO,MAAOC,QAAP,IAA8B;AACnC,QAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,MAAR,EAArB;;AAEA,QAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,UAAI;AAACf,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYjB,EAAZ,EAAgBC,KAAhB,EAAuBC,KAAvB;AACAS,MAAAA,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACD;;AACD;AACD,GATD;AAUD,CAXM;AAaP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAgBiB,QAAhB,EAAkCC,UAAlC,EAAuDC,OAAvD,KAA4E;AAE/F,SAAQT,QAAD,IAA4B;AACjCf,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EAA2CC,OAA3C,EACGC,IADH,CACQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACR,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC7BJ,QAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACD,OAFD,MAEO;AACL,YAAIY,GAAG,CAACR,IAAJ,CAASS,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChCb,UAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC4B,YAAAA,MAAM,EAAEH,GAAG,CAACR,IAAJ,CAASS;AAAlB,WAAV,CAAX,CAAR;AACD;AACF;AACF,KATH;AAUD,GAXD;AAYD,CAdM;AAgBP,OAAO,MAAMG,MAAM,GAAG,MAAM;AAC1B,SAAQf,QAAD,IAAwB;AAC7Bf,IAAAA,OAAO,CAAC8B,MAAR,GACGL,IADH,CACQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACR,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC7BJ,QAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACD;AACF,KALH;AAMD,GAPD;AAQD,CATM","sourcesContent":["import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {DispatchType} from \"./redux-store\";\nimport {stopSubmit} from \"redux-form\";\n\nexport type authReducersActionType =\n  | ReturnType<typeof setUserData>\n\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\";\n\nexport type UserDataType = {\n  id: number | null,\n  email: string | null,\n  login: string | null\n  isAuth: boolean\n}\n\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n}\n\n\nexport const authReducer = (state: UserDataType = initialState, action: authReducersActionType): UserDataType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return {\n        ...state,\n        ...action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA,\n    payload: {id, email, login, isAuth}\n  } as const\n)\n\n\nexport const getAuthUserData = () => {\n  return async (dispatch: Dispatch) => {\n    let response = await authAPI.authMe()\n\n    if (response.data.resultCode === 0) {\n      let {id, email, login} = response.data.data;\n      console.log(id, email, login)\n      dispatch(setUserData(id, email, login, true))\n    }\n    ;\n  }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean) => {\n\n  return (dispatch: DispatchType) => {\n    authAPI.login(email, password, rememberMe, captcha)\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          dispatch(getAuthUserData())\n        } else {\n          if (res.data.messages.length > 0) {\n            dispatch(stopSubmit('email', {_error: res.data.messages}));\n          }\n        }\n      })\n  }\n}\n\nexport const logout = () => {\n  return (dispatch: Dispatch) => {\n    authAPI.logout()\n      .then(res => {\n        if (res.data.resultCode === 0) {\n          dispatch(setUserData(null, null, null, false))\n        }\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}