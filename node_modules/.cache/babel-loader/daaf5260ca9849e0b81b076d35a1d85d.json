{"ast":null,"code":"import{applyMiddleware,combineReducers,legacy_createStore as createStore}from\"redux\";import{profileReducer}from\"./profileReducer\";import{dialogsReducer}from\"./dialogsReducer\";import{sidebarReducer}from\"./sidebarReducer\";import{usersReducer}from\"./usersReducer\";import{authReducer}from\"./authReducer\";import thunkMiddleware from'redux-thunk';import{reducer as formReducer}from\"redux-form\";import{useDispatch}from\"react-redux\";import{appReducer}from\"./appReducer\";var reducers=combineReducers({profilePage:profileReducer,dialogsPage:dialogsReducer,sidebar:sidebarReducer,usersPage:usersReducer,auth:authReducer,form:formReducer,app:appReducer});export var AppDispatch=function AppDispatch(){return useDispatch();};export var store=createStore(reducers,applyMiddleware(thunkMiddleware));","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/reduxStore.ts"],"names":["applyMiddleware","combineReducers","legacy_createStore","createStore","profileReducer","dialogsReducer","sidebarReducer","usersReducer","authReducer","thunkMiddleware","reducer","formReducer","useDispatch","appReducer","reducers","profilePage","dialogsPage","sidebar","usersPage","auth","form","app","AppDispatch","store"],"mappings":"AAAA,OAAmBA,eAAnB,CAAoCC,eAApC,CAAqDC,kBAAkB,GAAIC,CAAAA,WAA3E,KAA6F,OAA7F,CACA,OAAQC,cAAR,KAAwD,kBAAxD,CACA,OAAQC,cAAR,KAAwD,kBAAxD,CACA,OAAQC,cAAR,KAA6B,kBAA7B,CACA,OAAQC,YAAR,KAAoD,gBAApD,CACA,OAAQC,WAAR,KAA0B,eAA1B,CACA,MAAOC,CAAAA,eAAP,KAA0D,aAA1D,CACA,OAAQC,OAAO,GAAIC,CAAAA,WAAnB,KAAqC,YAArC,CACA,OAAQC,WAAR,KAA0B,aAA1B,CACA,OAAQC,UAAR,KAAiD,cAAjD,CAEA,GAAIC,CAAAA,QAAQ,CAAGb,eAAe,CAAC,CAC3Bc,WAAW,CAAEX,cADc,CAE3BY,WAAW,CAAEX,cAFc,CAG3BY,OAAO,CAAEX,cAHkB,CAI3BY,SAAS,CAAEX,YAJgB,CAK3BY,IAAI,CAAEX,WALqB,CAM3BY,IAAI,CAAET,WANqB,CAO3BU,GAAG,CAAER,UAPsB,CAAD,CAA9B,CAcA,MAAO,IAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAAMV,CAAAA,WAAW,EAAjB,EAApB,CAeP,MAAO,IAAMW,CAAAA,KAAK,CAAGpB,WAAW,CAACW,QAAD,CAAWd,eAAe,CAACS,eAAD,CAA1B,CAAzB","sourcesContent":["import {AnyAction, applyMiddleware, combineReducers, legacy_createStore as createStore} from \"redux\";\nimport {profileReducer, ProfileReducersActionType} from \"./profileReducer\";\nimport {dialogsReducer, dialogsReducersActionType} from \"./dialogsReducer\";\nimport {sidebarReducer} from \"./sidebarReducer\";\nimport {usersReducer, UsersReducersActionType} from \"./usersReducer\";\nimport {authReducer} from \"./authReducer\";\nimport thunkMiddleware, {ThunkAction, ThunkDispatch} from 'redux-thunk'\nimport {reducer as formReducer} from \"redux-form\";\nimport {useDispatch} from \"react-redux\";\nimport {appReducer, authReducersActionType} from \"./appReducer\";\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducers>;\n\nexport type AppDispatchType = ThunkDispatch<AppStateType, any, AnyAction>\n\nexport const AppDispatch = () => useDispatch<AppDispatchType>()\n\nexport type DispatchType = ReturnType<typeof AppDispatch>\nexport type AppActionsType = ProfileReducersActionType\n  | authReducersActionType\n  | dialogsReducersActionType\n  | UsersReducersActionType\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppStateType,\n  unknown,\n  AppActionsType\n  >\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))"]},"metadata":{},"sourceType":"module"}