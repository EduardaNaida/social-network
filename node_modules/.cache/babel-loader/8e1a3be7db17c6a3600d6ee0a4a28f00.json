{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/objectHelper\";\nconst FOLLOW = \"USER/FOLLOW\";\nconst UNFOLLOW = \"USER/UNFOLLOW\";\nconst SET_USERS = \"USER/SET_USERS\";\nconst SET_CURRENT_PAGE = \"USER/SET_CURRENT_PAGE\";\nconst SET_TOTAL_COUNT = 'USER/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'USER/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING = 'USER/TOGGLE_IS_FOLLOWING';\nconst initialState = {\n  users: [],\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n};\nexport const usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userID, \"id\", {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userID, \"id\", {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: [...action.users, ...state.users]\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLOWING:\n      return { ...state,\n        followingInProgress: action.followingInProgress ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n      };\n\n    default:\n      return state;\n  }\n};\nexport const followSuccess = userID => {\n  return {\n    type: FOLLOW,\n    userID: userID\n  };\n};\nexport const unfollowSuccess = userID => {\n  return {\n    type: UNFOLLOW,\n    userID: userID\n  };\n};\nexport const setUsers = users => {\n  return {\n    type: SET_USERS,\n    users: users\n  };\n};\nexport const setCurrentPage = currentPage => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: currentPage\n  };\n};\nexport const setTotalCount = totalUsersCount => {\n  return {\n    type: SET_TOTAL_COUNT,\n    count: totalUsersCount\n  };\n};\nexport const setIsFetching = isFetching => {\n  return {\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n  };\n};\nexport const setIsFollowing = (followingInProgress, userId) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING,\n    followingInProgress,\n    userId\n  };\n};\nexport const requestUser = (page, pageSize) => {\n  return async dispatch => {\n    dispatch(setCurrentPage(page));\n    dispatch(setIsFetching(true));\n    let response = await usersAPI.getUsersData(page, pageSize);\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(response.items));\n    dispatch(setTotalCount(response.totalCount));\n  };\n};\n\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(setIsFollowing(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(setIsFollowing(false, userId));\n};\n\nexport const unfollow = userId => {\n  return async dispatch => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollowUsers.bind(usersAPI), unfollowSuccess);\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.followUsers.bind(usersAPI), followSuccess);\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/usersReducer.ts"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userID","followed","count","userId","filter","id","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalCount","setIsFetching","setIsFollowing","requestUser","page","dispatch","response","getUsersData","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","unfollow","unfollowUsers","bind","follow","followUsers"],"mappings":"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","sourcesContent":["import {ResponseUserType, usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\nimport {updateObjectInArray} from \"../utils/objectHelper\";\n\nexport type UsersReducersActionType =\n  | FollowType\n  | UnFollowType\n  | ReturnType<typeof setUsers>\n  | ReturnType<typeof setCurrentPage>\n  | ReturnType<typeof setTotalCount>\n  | ReturnType<typeof setIsFetching>\n  | ReturnType<typeof setIsFollowing>\n\ntype FollowType = ReturnType<typeof followSuccess>\ntype UnFollowType = ReturnType<typeof unfollowSuccess>\n\nconst FOLLOW = \"USER/FOLLOW\";\nconst UNFOLLOW = \"USER/UNFOLLOW\";\nconst SET_USERS = \"USER/SET_USERS\";\nconst SET_CURRENT_PAGE = \"USER/SET_CURRENT_PAGE\";\nconst SET_TOTAL_COUNT = 'USER/SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'USER/TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING = 'USER/TOGGLE_IS_FOLLOWING';\n\nexport type UsersData = {\n  id: number,\n  name: string\n  followed: boolean\n  photos: {\n    small: string,\n    large: string\n  }\n}\n\nexport type UserPropsType = {\n  users: Array<UsersData>,\n  pageSize: number,\n  totalUsersCount: number,\n  currentPage: number,\n  isFetching: boolean,\n  followingInProgress: Array<any>\n}\n\nconst initialState: UserPropsType = {\n  users: [],\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: []\n}\n\nexport const usersReducer = (state: UserPropsType = initialState, action: UsersReducersActionType): UserPropsType => {\n\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userID, \"id\", {followed: true})\n      }\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userID, \"id\", {followed: false})\n      }\n\n    case SET_USERS:\n      return {\n        ...state,\n        users: [...action.users, ...state.users]\n      }\n\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage\n      }\n    case SET_TOTAL_COUNT:\n      return {\n        ...state,\n        totalUsersCount: action.count\n      }\n    case TOGGLE_IS_FETCHING:\n      return {\n        ...state,\n        isFetching: action.isFetching\n      }\n    case TOGGLE_IS_FOLLOWING:\n      return {\n        ...state,\n        followingInProgress: action.followingInProgress\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter(id => id !== action.userId)\n      }\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = (userID: number) => {\n  return {\n    type: FOLLOW,\n    userID: userID\n  } as const\n}\n\nexport const unfollowSuccess = (userID: number) => {\n  return {\n    type: UNFOLLOW,\n    userID: userID\n  } as const\n}\n\nexport const setUsers = (users: Array<UsersData>) => {\n  return {\n    type: SET_USERS,\n    users: users\n  } as const\n}\n\nexport const setCurrentPage = (currentPage: number) => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage: currentPage\n  } as const\n}\n\nexport const setTotalCount = (totalUsersCount: number) => {\n  return {\n    type: SET_TOTAL_COUNT,\n    count: totalUsersCount\n  } as const\n}\n\nexport const setIsFetching = (isFetching: boolean) => {\n  return {\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n  } as const\n}\n\nexport const setIsFollowing = (followingInProgress: boolean, userId: number) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING,\n    followingInProgress,\n    userId\n  } as const\n}\n\n\nexport const requestUser = (page: number, pageSize: number) => {\n  return async (dispatch: Dispatch) => {\n    dispatch(setCurrentPage(page));\n    dispatch(setIsFetching(true));\n\n    let response = await usersAPI.getUsersData(page, pageSize)\n\n    dispatch(setIsFetching(false));\n    dispatch(setUsers(response.items));\n    dispatch(setTotalCount(response.totalCount));\n  }\n}\n\nconst followUnfollowFlow = async (dispatch: Dispatch,\n                                  userId: number,\n                                  apiMethod: (userId: number) => Promise<ResponseUserType>,\n                                  actionCreator: (userId: number) => FollowType | UnFollowType) => {\n  dispatch(setIsFollowing(true, userId))\n\n  let response = await apiMethod(userId)\n\n  if (response.resultCode === 0) {\n    dispatch(actionCreator(userId))\n  }\n\n  dispatch(setIsFollowing(false, userId))\n}\n\nexport const unfollow = (userId: number) => {\n  return async (dispatch: Dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollowUsers.bind(usersAPI), unfollowSuccess)\n  }\n}\n\nexport const follow = (userId: number) => {\n  return async (dispatch: Dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.followUsers.bind(usersAPI), followSuccess)\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}