{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\";\nconst GET_CAPTCHA_URL = 'AUTH/GET_CAPTCHA_URL';\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    case GET_CAPTCHA_URL:\n      return { ...state,\n        captchaUrl: action.captchaUrl\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrl = captchaUrl => {\n  return {\n    type: GET_CAPTCHA_URL,\n    captchaUrl: captchaUrl\n  };\n};\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    let response = await authAPI.authMe();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setUserData(id, email, login, true));\n    }\n\n    ;\n  };\n};\nexport const login = (email, password, rememberMe, captcha) => {\n  return async dispatch => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      if (response.data.resultCode === 10) {\n        dispatch(getCaptcha());\n      }\n\n      if (response.data.messages.length > 0) {\n        dispatch(stopSubmit('email', {\n          _error: response.data.messages\n        }));\n      }\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n      dispatch(setUserData(null, null, null, false));\n    }\n  };\n};\nexport const getCaptcha = () => {\n  return async dispatch => {\n    const response = await securityAPI.getCaptcha();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrl(captchaUrl));\n    dispatch(stopSubmit('login', {\n      _error: response.data.messages\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/authReducer.ts"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL","initialState","id","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setUserData","getCaptchaUrl","getAuthUserData","dispatch","response","authMe","data","resultCode","password","rememberMe","captcha","getCaptcha","messages","length","_error","logout","url"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\nimport {authAPI, securityAPI} from \"../api/api\";\nimport {DispatchType} from \"./reduxStore\";\nimport {stopSubmit} from \"redux-form\";\n\nexport type authReducersActionType =\n  | ReturnType<typeof setUserData>\n  | ReturnType<typeof getCaptchaUrl>\n\nconst SET_USER_DATA = \"AUTH/SET_USER_DATA\";\nconst GET_CAPTCHA_URL = 'AUTH/GET_CAPTCHA_URL'\n\nexport type UserDataType = {\n  id: number | null,\n  email: string | null,\n  login: string | null\n  isAuth: boolean\n  captchaUrl: string | null\n}\n\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n}\n\n\nexport const authReducer = (state: UserDataType = initialState, action: authReducersActionType): UserDataType => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return {\n        ...state,\n        ...action.payload\n      }\n    case GET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.captchaUrl\n      }\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n    type: SET_USER_DATA,\n    payload: {id, email, login, isAuth}\n  } as const\n)\n\nexport const getCaptchaUrl = (captchaUrl: string) => {\n  return {\n    type: GET_CAPTCHA_URL,\n    captchaUrl: captchaUrl\n  } as const\n}\n\nexport const getAuthUserData = () => {\n  return async (dispatch: Dispatch) => {\n    let response = await authAPI.authMe()\n\n    if (response.data.resultCode === 0) {\n      let {id, email, login} = response.data.data;\n      dispatch(setUserData(id, email, login, true))\n    }\n    ;\n  }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => {\n\n  return async (dispatch: DispatchType) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha)\n\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData())\n    } else {\n      if (response.data.resultCode === 10) {\n        dispatch(getCaptcha())\n      }\n      if (response.data.messages.length > 0) {\n        dispatch(stopSubmit('email', {_error: response.data.messages}));\n      }\n    }\n\n  }\n}\n\nexport const logout = () => {\n  return async (dispatch: Dispatch) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n      dispatch(setUserData(null, null, null, false))\n    }\n  }\n}\n\nexport const getCaptcha = () => {\n  return async (dispatch: Dispatch) => {\n    const response = await securityAPI.getCaptcha()\n    const captchaUrl = response.data.url\n\n    dispatch(getCaptchaUrl(captchaUrl))\n    dispatch(stopSubmit('login', {_error: response.data.messages}))\n  }\n}"]},"metadata":{},"sourceType":"module"}