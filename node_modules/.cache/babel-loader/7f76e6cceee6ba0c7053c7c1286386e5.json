{"ast":null,"code":"import { profileAPI } from \"../api/api\";\nconst ADD_POST = 'PROFILE/ADD-POST';\nconst NEW_POST_TEXT = 'PROFILE/NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'PROFILE/SET_USER_PROFILE';\nconst SET_STATUS = 'PROFILE/SET_STATUS';\nconst UPDATE_USER_STATUS = 'PROFILE/UPDATE_USER_STATUS';\nconst initialState = {\n  postData: [{\n    name: 'Eduarda',\n    message: 'Hello',\n    likes: '15'\n  }, {\n    name: 'Artiom',\n    message: 'Good morning',\n    likes: '20'\n  }],\n  newTextValue: '',\n  profile: null,\n  status: ''\n};\nexport const profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      {\n        const newPost = {\n          name: 'Alex',\n          message: action.postMessage,\n          likes: '10'\n        };\n        return { ...state,\n          newTextValue: '',\n          postData: [...state.postData, newPost]\n        };\n      }\n\n    case NEW_POST_TEXT:\n      {\n        return { ...state,\n          newTextValue: action.newText\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case UPDATE_USER_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const AddPostAC = newTextValue => {\n  return {\n    type: ADD_POST,\n    postMessage: newTextValue\n  };\n};\n_c = AddPostAC;\nexport const NewPostText = newText => {\n  return {\n    type: NEW_POST_TEXT,\n    newText: newText\n  };\n};\n_c2 = NewPostText;\nexport const setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile: profile\n  };\n};\nexport const setUserStatus = status => {\n  return {\n    type: SET_STATUS,\n    status: status\n  };\n};\nexport const updateStatus = status => {\n  return {\n    type: UPDATE_USER_STATUS,\n    status: status\n  };\n};\nexport const getUserProfile = userId => {\n  return async dispatch => {\n    let response = await profileAPI.getProfile(userId);\n    dispatch(setUserProfile(response.data));\n  };\n};\nexport const getUserStatus = userId => {\n  return async dispatch => {\n    let response = await profileAPI.getStatus(userId);\n    dispatch(setUserStatus(response.data));\n  };\n};\nexport const updateUserStatus = status => {\n  return async dispatch => {\n    let response = await profileAPI.updateStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(setUserStatus(status));\n    }\n  };\n};\nexport const saveProfile = profile => {\n  return async (dispatch, getState) => {\n    const userId = getState().auth.id;\n    const response = await profileAPI.saveProfile(profile);\n\n    if (response.data.resultCode === 0) {\n      console.log(response.data); //dispatch(getUserProfile(userId))\n    }\n  };\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddPostAC\");\n$RefreshReg$(_c2, \"NewPostText\");","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/profileReducer.ts"],"names":["profileAPI","ADD_POST","NEW_POST_TEXT","SET_USER_PROFILE","SET_STATUS","UPDATE_USER_STATUS","initialState","postData","name","message","likes","newTextValue","profile","status","profileReducer","state","action","type","newPost","postMessage","newText","AddPostAC","NewPostText","setUserProfile","setUserStatus","updateStatus","getUserProfile","userId","dispatch","response","getProfile","data","getUserStatus","getStatus","updateUserStatus","resultCode","saveProfile","getState","auth","id","console","log"],"mappings":"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","sourcesContent":["import {Dispatch} from \"redux\";\nimport {profileAPI, ProfileRequestType, usersAPI} from \"../api/api\";\nimport {AppThunk} from \"./reduxStore\";\n\nexport type ProfileReducersActionType =\n  | ReturnType<typeof AddPostAC>\n  | ReturnType<typeof NewPostText>\n  | ReturnType<typeof setUserProfile>\n  | ReturnType<typeof setUserStatus>\n  | ReturnType<typeof updateStatus>\n\n\nconst ADD_POST = 'PROFILE/ADD-POST';\nconst NEW_POST_TEXT = 'PROFILE/NEW-POST-TEXT';\nconst SET_USER_PROFILE = 'PROFILE/SET_USER_PROFILE';\nconst SET_STATUS = 'PROFILE/SET_STATUS';\nconst UPDATE_USER_STATUS = 'PROFILE/UPDATE_USER_STATUS';\n\nexport type PostData = {\n  name: string\n  message: string\n  likes: string\n}\nexport type ProfilePageType = {\n  postData: Array<PostData>\n  newTextValue: string\n  profile: ProfileType | null\n  status: string\n}\n\nexport type ProfileType = {\n  lookingForAJobDescription: string,\n  lookingForAJob: boolean,\n  fullName: string,\n  photos: {\n    small: string | undefined,\n    large: string | undefined\n  }\n}\n\nconst initialState: ProfilePageType = {\n  postData: [\n    {name: 'Eduarda', message: 'Hello', likes: '15'},\n    {name: 'Artiom', message: 'Good morning', likes: '20'}\n  ],\n  newTextValue: '',\n  profile: null,\n  status: ''\n}\n\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersActionType): ProfilePageType => {\n\n  switch (action.type) {\n    case ADD_POST: {\n      const newPost: PostData = {\n        name: 'Alex',\n        message: action.postMessage,\n        likes: '10',\n      }\n\n      return {\n        ...state,\n        newTextValue: '',\n        postData: [...state.postData, newPost]\n      };\n    }\n    case NEW_POST_TEXT: {\n      return {\n        ...state,\n        newTextValue: action.newText\n      };\n    }\n    case SET_USER_PROFILE: {\n      return {\n        ...state,\n        profile: action.profile\n      }\n    }\n    case SET_STATUS: {\n      return {\n        ...state,\n        status: action.status\n      }\n    }\n    case UPDATE_USER_STATUS: {\n      return {\n        ...state,\n        status: action.status\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport const AddPostAC = (newTextValue: string) => {\n  return {\n    type: ADD_POST,\n    postMessage: newTextValue\n  } as const\n}\n\nexport const NewPostText = (newText: string) => {\n  return {\n    type: NEW_POST_TEXT,\n    newText: newText\n  } as const\n}\n\nexport const setUserProfile = (profile: any) => {\n  return {\n    type: SET_USER_PROFILE,\n    profile: profile\n  } as const\n}\n\nexport const setUserStatus = (status: string) => {\n  return {\n    type: SET_STATUS,\n    status: status\n  } as const\n}\n\nexport const updateStatus = (status: string) => {\n  return {\n    type: UPDATE_USER_STATUS,\n    status: status\n  } as const\n}\n\nexport const getUserProfile = (userId: number) => {\n  return async (dispatch: Dispatch) => {\n\n    let response = await profileAPI.getProfile(userId)\n    dispatch(setUserProfile(response.data));\n  }\n}\n\nexport const getUserStatus = (userId: string) => {\n  return async (dispatch: Dispatch) => {\n\n    let response = await profileAPI.getStatus(userId)\n    dispatch(setUserStatus(response.data))\n\n  }\n}\n\nexport const updateUserStatus = (status: string) => {\n  return async (dispatch: Dispatch) => {\n    let response = await profileAPI.updateStatus(status)\n\n    if (response.data.resultCode === 0) {\n      dispatch(setUserStatus(status))\n    }\n  }\n}\nexport const saveProfile = (profile: ProfileRequestType): AppThunk => {\n  return async (dispatch, getState) => {\n    const userId = getState().auth.id\n    const response = await profileAPI.saveProfile(profile)\n\n    if (response.data.resultCode === 0) {\n      console.log(response.data)\n      //dispatch(getUserProfile(userId))\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}