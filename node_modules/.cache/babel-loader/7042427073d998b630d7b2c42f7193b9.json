{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return dispatch => {\n    return authAPI.authMe().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data;\n        console.log(id, email, login);\n        dispatch(setUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe, captcha) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe, captcha).then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n      } else {\n        if (res.data.messages.length > 0) {\n          dispatch(stopSubmit('email', {\n            _error: res.data.messages\n          }));\n        }\n      }\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    authAPI.logout().then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(setUserData(null, null, null, false));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/redux/authReducer.ts"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setUserData","getAuthUserData","dispatch","authMe","then","response","data","resultCode","console","log","password","rememberMe","captcha","res","messages","length","_error","logout"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,SAAQC,UAAR,QAAyB,YAAzB;AAKA,MAAMC,aAAa,GAAG,eAAtB;AASA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAG,YAAsF;AAAA,MAArFC,KAAqF,uEAA/DN,YAA+D;AAAA,MAAjDO,MAAiD;;AAC7G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVM;AAYP,OAAO,MAAMI,WAAW,GAAG,CAACT,EAAD,EAAoBC,KAApB,EAA0CC,KAA1C,EAAgEC,MAAhE,MAAqF;AACxGI,EAAAA,IAAI,EAAET,aADkG;AAExGU,EAAAA,OAAO,EAAE;AAACR,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAF+F,CAArF,CAApB;AAOP,OAAO,MAAMO,eAAe,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAwB;AAC3B,WAAOf,OAAO,CAACgB,MAAR,GACFC,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAAChB,UAAAA,EAAD;AAAKC,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBY,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYlB,EAAZ,EAAgBC,KAAhB,EAAuBC,KAAvB;AACAS,QAAAA,QAAQ,CAACF,WAAW,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACH;AACJ,KAPE,CAAP;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAgBkB,QAAhB,EAAkCC,UAAlC,EAAuDC,OAAvD,KAA4E;AAE7F,SAAQV,QAAD,IAA4B;AAC/Bf,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBkB,QAArB,EAA+BC,UAA/B,EAA2CC,OAA3C,EACKR,IADL,CACUS,GAAG,IAAI;AACT,UAAIA,GAAG,CAACP,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BL,QAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,OAFD,MAEO;AACH,YAAIY,GAAG,CAACP,IAAJ,CAASQ,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9Bb,UAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC4B,YAAAA,MAAM,EAAEH,GAAG,CAACP,IAAJ,CAASQ;AAAlB,WAAV,CAAX,CAAR;AACH;AACJ;AACJ,KATL;AAUH,GAXD;AAYH,CAdM;AAgBP,OAAO,MAAMG,MAAM,GAAG,MAAM;AACxB,SAAQf,QAAD,IAAwB;AAC3Bf,IAAAA,OAAO,CAAC8B,MAAR,GACKb,IADL,CACUS,GAAG,IAAI;AACT,UAAIA,GAAG,CAACP,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BL,QAAAA,QAAQ,CAACF,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACJ,KALL;AAMH,GAPD;AAQH,CATM","sourcesContent":["import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {DispatchType} from \"./redux-store\";\nimport {stopSubmit} from \"redux-form\";\n\nexport type authReducersActionType =\n    | ReturnType<typeof setUserData>\n\nconst SET_USER_DATA = \"SET_USER_DATA\";\n\nexport type UserDataType = {\n    id: number | null,\n    email: string | null,\n    login: string | null\n    isAuth: boolean\n}\n\nconst initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\n\nexport const authReducer = (state: UserDataType = initialState, action: authReducersActionType): UserDataType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n};\n\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: SET_USER_DATA,\n        payload: {id, email, login, isAuth}\n    } as const\n)\n\n\nexport const getAuthUserData = () => {\n    return (dispatch: Dispatch) => {\n        return authAPI.authMe()\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    let {id, email, login} = response.data.data;\n                    console.log(id, email, login)\n                    dispatch(setUserData(id, email, login, true))\n                }\n            });\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean) => {\n\n    return (dispatch: DispatchType) => {\n        authAPI.login(email, password, rememberMe, captcha)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(getAuthUserData())\n                } else {\n                    if (res.data.messages.length > 0) {\n                        dispatch(stopSubmit('email', {_error: res.data.messages}));\n                    }\n                }\n            })\n    }\n}\n\nexport const logout = () => {\n    return (dispatch: Dispatch) => {\n        authAPI.logout()\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(setUserData(null, null, null, false))\n                }\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}