{"ast":null,"code":"import React from'react';import{Field,reduxForm}from\"redux-form\";import{Input}from\"../common/formControls/formControl\";import{requiredField}from\"../../utils/validators/validators\";import{connect,useSelector}from\"react-redux\";import{login}from\"../../redux/authReducer\";import{Redirect}from\"react-router-dom\";import style from'../common/formControls/FormControls.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LoginForm=function LoginForm(_ref){var error=_ref.error,handleSubmit=_ref.handleSubmit,captchaUrl=_ref.captchaUrl;return/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Field,{placeholder:'Email',name:'email',component:Input,validate:[requiredField]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Field,{placeholder:'Password',type:'password',name:'password',component:Input,validate:[requiredField]})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Field,{component:Input,type:'checkbox',name:'rememberMe',validate:[requiredField]}),\"remember me\"]}),error&&/*#__PURE__*/_jsx(\"div\",{className:style.formControlError,children:error}),captchaUrl&&/*#__PURE__*/_jsx(\"img\",{src:captchaUrl,alt:\"captcha\"}),captchaUrl&&/*#__PURE__*/_jsx(Field,{placeholder:'Type symbols',name:'captcha',component:Input,validate:[requiredField]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{children:\"Login\"})})]});};var LoginReduxForm=reduxForm({form:'email'})(LoginForm);var Login=function Login(props){var captchaUrl=useSelector(function(state){return state.auth.captchaUrl;});var onSubmit=function onSubmit(formData){props.login(formData.email,formData.password,formData.rememberMe,formData.captcha);};if(props.isAuth){return/*#__PURE__*/_jsx(Redirect,{to:'/profile'});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Login page\"}),/*#__PURE__*/_jsx(LoginReduxForm,{onSubmit:onSubmit,captchaUrl:captchaUrl})]});};var mapStateToProps=function mapStateToProps(state){return{isAuth:state.auth.isAuth,captchaUrl:state.auth.captchaUrl};};export default connect(mapStateToProps,{login:login})(Login);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/components/Login/Login.tsx"],"names":["React","Field","reduxForm","Input","requiredField","connect","useSelector","login","Redirect","style","LoginForm","error","handleSubmit","captchaUrl","formControlError","LoginReduxForm","form","Login","props","state","auth","onSubmit","formData","email","password","rememberMe","captcha","isAuth","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/formControls/formControl\";\nimport {requiredField} from \"../../utils/validators/validators\";\nimport {connect, useSelector} from \"react-redux\";\nimport {login} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {Redirect} from \"react-router-dom\";\nimport style from '../common/formControls/FormControls.module.css'\n\ntype FormDataType = {\n  email: string,\n  password: string,\n  rememberMe: boolean,\n  captcha: string\n}\n\ntype LoginCaptchaType = {\n  captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginCaptchaType> & LoginCaptchaType> = ({error, handleSubmit, captchaUrl}) => {\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field placeholder={'Email'}\n               name={'email'}\n               component={Input}\n               validate={[requiredField]}/>\n      </div>\n      <div>\n        <Field placeholder={'Password'}\n               type={'password'}\n               name={'password'}\n               component={Input}\n               validate={[requiredField]}/>\n      </div>\n      <div>\n        <Field component={Input}\n               type={'checkbox'}\n               name={'rememberMe'}\n               validate={[requiredField]}/>remember me\n      </div>\n      {error && <div className={style.formControlError}>{error}</div>}\n\n      {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\n      {captchaUrl && <Field placeholder={'Type symbols'}\n                            name={'captcha'}\n                            component={Input}\n                            validate={[requiredField]}\n      />\n      }\n\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<FormDataType, LoginCaptchaType>({form: 'email'})(LoginForm)\n\nconst Login = (props: LoginPropsType) => {\n  const captchaUrl = useSelector((state:AppStateType) => state.auth.captchaUrl)\n  const onSubmit = (formData: FormDataType) => {\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n  }\n\n  if (props.isAuth) {\n    return <Redirect to={'/profile'}/>\n  }\n\n  return (\n    <div>\n      <h3>Login page</h3>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n  );\n};\n\ntype LoginPropsType = mapDispatchToProps & mapStateToPropsType\n\ntype mapDispatchToProps = {\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\n}\n\ntype mapStateToPropsType = {\n  isAuth: boolean\n  captchaUrl: string | null\n}\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n  }\n}\nexport default connect(mapStateToProps, {login})(Login);\n\n\n"]},"metadata":{},"sourceType":"module"}