{"ast":null,"code":"var _jsxFileName = \"/Users/eduardanaida/Documents/GitHub/social-network/src/components/Users/UsersContainer.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, requestUser, setCurrentPage, setIsFetching, setTotalCount, setUsers, unfollow } from \"../../redux/usersReducer\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport { compose } from \"redux\";\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalUsersCount, getUser } from \"../../redux/usersSelectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class UsersContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.requestUser(pageNumber, this.props.pageSize);\n    };\n  }\n\n  componentDidMount() {\n    this.props.requestUser(this.props.currentPage, this.props.pageSize);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 38\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        usersPage: this.props.usersPage,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        follow: this.props.follow,\n        unfollow: this.props.unfollow,\n        setUsers: this.props.setUsers,\n        setCurrentPage: this.props.setCurrentPage,\n        setTotalCount: this.props.setTotalCount,\n        onPageChanged: this.onPageChanged,\n        followingInProgress: this.props.followingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  console.log(state.usersPage.totalUsersCount);\n  return {\n    usersPage: getUser(state),\n    pageSize: getPageSize(state),\n    totalUsersCount: getTotalUsersCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state)\n  };\n}; // let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n// export const UsersContainer = connect(mapStateToProps,\n//     {\n//         follow,\n//         unfollow,\n//         setUsers,\n//         setCurrentPage,\n//         setTotalCount,\n//         setIsFetching,\n//         getUser\n//     })(UsersAPIComponent);\n\n\nexport default compose(connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalCount,\n  setIsFetching,\n  requestUser\n}))(UsersContainer);","map":{"version":3,"sources":["/Users/eduardanaida/Documents/GitHub/social-network/src/components/Users/UsersContainer.tsx"],"names":["React","connect","follow","requestUser","setCurrentPage","setIsFetching","setTotalCount","setUsers","unfollow","Users","Preloader","compose","getCurrentPage","getFollowingInProgress","getIsFetching","getPageSize","getTotalUsersCount","getUser","UsersContainer","Component","onPageChanged","pageNumber","props","pageSize","componentDidMount","currentPage","render","isFetching","totalUsersCount","usersPage","followingInProgress","mapStateToProps","state","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n    follow, requestUser,\n    setCurrentPage, setIsFetching,\n    setTotalCount,\n    setUsers, unfollow,\n    UsersData\n} from \"../../redux/usersReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/preloader/Preloder\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount,\n    getUser\n} from \"../../redux/usersSelectors\";\n\ntype MapStatePropsType = {\n    usersPage: UsersData[]\n    pageSize: number\n    totalUsersCount: number\n    currentPage: number\n    isFetching: boolean\n    followingInProgress: Array<any>\n}\n\ntype MapDispatchPropsType = {\n    follow: (userId: number) => void\n    unfollow: (userId: number) => void\n    setUsers: (users: any) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalCount: (totalUsersCount: number) => void\n    setIsFetching: (isFetching: boolean) => void\n    requestUser: (currentPage: number, pageSize: number) => void\n}\n\nexport type UsersPagePropsType = MapStatePropsType & MapDispatchPropsType\n\n\nexport class UsersContainer extends React.Component<UsersPagePropsType> {\n\n    componentDidMount() {\n        this.props.requestUser(this.props.currentPage, this.props.pageSize)\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.requestUser(pageNumber, this.props.pageSize)\n    }\n\n    render() {\n\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users\n                totalUsersCount={this.props.totalUsersCount}\n                usersPage={this.props.usersPage}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                setUsers={this.props.setUsers}\n                setCurrentPage={this.props.setCurrentPage}\n                setTotalCount={this.props.setTotalCount}\n                onPageChanged={this.onPageChanged}\n                followingInProgress={this.props.followingInProgress}\n            />\n        </>\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    console.log(state.usersPage.totalUsersCount)\n\n    return {\n        usersPage: getUser(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state)\n    }\n}\n// let mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n//     return {\n//         follow: (userId: number) => {\n//             dispatch(follow(userId));\n//         },\n//         unfollow: (userId: number) => {\n//             dispatch(unfollow(userId));\n//         },\n//         setUsers: (users: any) => {\n//             dispatch(setUsers(users));\n//         },\n//         setCurrentPage: (currentPage: number) => {\n//             dispatch(setCurrentPage(currentPage))\n//         },\n//         setTotalCount: (count: number) => {\n//             dispatch(setTotalCount(count))\n//         },\n//         setIsFetching: (isFetching: boolean) => {\n//             dispatch(setIsFetching(isFetching))\n//         }\n//     }\n// }\n\n// export const UsersContainer = connect(mapStateToProps,\n//     {\n//         follow,\n//         unfollow,\n//         setUsers,\n//         setCurrentPage,\n//         setTotalCount,\n//         setIsFetching,\n//         getUser\n//     })(UsersAPIComponent);\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {follow, unfollow, setUsers, setCurrentPage, setTotalCount, setIsFetching, requestUser}),\n)(UsersContainer)\n\n"]},"metadata":{},"sourceType":"module"}