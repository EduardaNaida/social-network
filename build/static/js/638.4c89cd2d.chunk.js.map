{"version":3,"file":"static/js/638.4c89cd2d.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/Contacts/Contacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__u7GZ5\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusType = {\n  status: string\n  updateStatus: (status: string) => void\n}\n\nconst ProfileStatus = (props: ProfileStatusType) => {\n\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status)\n  }, [props.status])\n\n  const activateMode = () => {\n    setEditMode(true)\n  }\n\n  const deactivateMode = () => {\n    setEditMode(false)\n    props.updateStatus(status)\n  }\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  return (\n    <div>\n      {!editMode &&\n          <div>\n              <span onClick={activateMode}>{props.status || 'No status'}</span>\n          </div>\n      }\n      {editMode &&\n          <div>\n              <input onChange={onChangeHandler}\n                     onBlur={deactivateMode}\n                     value={status}/>\n          </div>\n      }\n    </div>\n  );\n};\n\nexport default ProfileStatus;","import React, {FC} from 'react';\n\ntype ContactsType = {\n  contactTitle: string,\n  contactValue: string\n}\nexport const Contacts: FC<ContactsType> = ({contactValue, contactTitle}) => {\n  return (\n    <div>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  );\n};","import React from 'react';\nimport {ProfileType} from \"../../../../redux/profileReducer\";\nimport {Contacts} from \"../Contacts/Contacts\";\nimport {ContactsType} from \"../../../../api/api\";\n\ntype ProfileDataType = {\n  profile: ProfileType\n  status: string\n  updateStatus: (status: string) => void\n  callback: () => void\n  isOwner: boolean\n}\n\n\nexport const ProfileData:React.FC<ProfileDataType> = ({profile, isOwner, updateStatus, status, callback}) => {\n  return (\n    <>\n      <div>\n        {isOwner && <button onClick={callback}>edit</button>}\n      </div>\n      <div>\n        <b>Full name:</b> {profile.fullName}\n      </div>\n\n      <div>\n        <b>Looking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n\n      {profile.lookingForAJob &&\n          <div>\n              <b>My professional skills: </b>{profile.lookingForAJobDescription}\n          </div>\n      }\n\n      <div>\n        <b>About me: </b> {profile.aboutMe}\n      </div>\n\n      <div>\n        <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n        return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n      })}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\nimport {InputArea} from \"../../../../common/formControls/formControl\";\nimport {requiredField} from \"../../../../../utils/validators/validators\";\nimport {ProfileRequestType} from \"../../../../../api/api\";\nimport style from \"../../../../common/formControls/FormControls.module.css\";\n\n\ntype FormDataType = {\n  profile: ProfileType\n  error?: string\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileRequestType, FormDataType> & FormDataType> = ({handleSubmit, profile, error}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div><button>save</button></div>\n      {error && <div className={style.formControlError}>{error}</div>}\n      <div>\n        <b>Full name:</b>\n        <Field placeholder={'Full name'}\n               name={'fullName'}\n               component={InputArea}\n               validate={[requiredField]}/>\n      </div>\n\n      <div>\n        <b>Looking for a job: </b>\n        <Field component={InputArea}\n               type={'checkbox'}\n               name={'lookingForAJob'}/>\n      </div>\n\n      <div>\n        <b>My professional skills: </b>\n        <Field placeholder={'My professional skills'}\n               name={'lookingForAJobDescription'}\n               component={InputArea}/>\n      </div>\n\n      <div>\n        <b>About me: </b>\n        <Field placeholder={'About me'}\n               name={'aboutMe'}\n               component={InputArea}/>\n      </div>\n\n      <div><b>Contacts:</b></div> {Object.keys(profile.contacts).map(key => {\n      return <div key={key}>{key}: {<Field placeholder={key}\n                                name={'contacts.'+ key}\n                                component={InputArea}/>}\n      </div>\n    })}\n\n    </form>\n  );\n};\n\nexport const ProfileDataFormRedux = reduxForm<ProfileRequestType, FormDataType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, FC, useState} from 'react';\nimport s from \"./ProfileInfo.module.css\";\nimport Preloader from \"../../common/preloader/Preloder\";\nimport {ProfileType, savePhoto} from \"../../../redux/profileReducer\";\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport avatar from \"../../../assets/images/avatar.png\";\nimport {ProfileData} from \"./ProfileData/ProfileData\";\nimport {ProfileDataFormRedux} from \"./ProfileData/ProfileDataForm/ProfileDataForm\";\nimport {ProfileRequestType} from \"../../../api/api\";\n\ntype ProfileInfoType = {\n  profile: ProfileType | null\n  status: string\n  updateStatus: (status: string) => void\n  saveProfile: (profile: ProfileRequestType) => Promise<any>\n  isOwner: boolean\n  savePhoto: (file: File) => void\n}\n\n\nexport const ProfileInfo: FC<ProfileInfoType> = ({profile, status, updateStatus, saveProfile, isOwner, savePhoto}) => {\n\n  const [editMode, setEditMode] = useState(false);\n  const [img, setImg] = React.useState<string | undefined>()\n\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  const onSubmit = (formData: ProfileRequestType) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false)\n    })\n  }\n\n  const onSelectedPhoto = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      console.log(e.target.files[0])\n      savePhoto(e.target.files[0]);\n    }\n  }\n\n  return (\n    <div className={s.profile}>\n      <div className={s.description}>\n        <img src={profile.photos.large || avatar} alt=\"profile\"/>\n        {isOwner && <input type=\"file\" onChange={onSelectedPhoto} />}\n\n        {editMode ?\n          <ProfileDataFormRedux initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n          :\n          <ProfileData profile={profile} status={status} updateStatus={updateStatus} callback={() => {\n            setEditMode(true)\n          }} isOwner={isOwner}/>}\n\n      </div>\n      <ProfileStatus status={status} updateStatus={updateStatus}/>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"MyPosts_profile__3WzHi\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Post_profile__PaS3+\",\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css';\n\ntype PostType = {\n  name: string\n  message: string\n  likes: string\n}\n\nexport const Post = (props: PostType) => {\n  return (\n    <div>\n      <div className={s.item}>\n        {props.name}\n        <div>\n          <img src=\"https://img.icons8.com/bubbles/50/000000/user.png\" alt=\"userAvatar\"/>\n          {props.message}\n          <div>\n            {props.likes}\n            likes\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport {Post} from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/formControls/formControl\";\n\ntype FormDataType = {\n  text: string\n}\n\nconst maxLength = maxLengthCreator(10);\n\nconst MyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field placeholder={'Write your new post'}\n               name={'text'}\n               component={TextArea}\n               validate={[requiredField, maxLength]}/>\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  );\n};\n\n\nconst PostReduxForm = reduxForm<FormDataType>({form: 'text'})(MyPostForm)\n\n\nexport const MyPosts = React.memo<ProfilePropsType>((props) => {\n\n  console.log(\"RENDER POST\")\n  let getPostData = props.profilePage.postData.map((ev, id) => {\n    return (\n      <Post key={id} name={ev.name} message={ev.message} likes={ev.likes}/>\n    )\n  })\n\n  const addPost = (newTextValue: FormDataType) => {\n    props.addPostCallback(newTextValue.text);\n  }\n\n  return (\n    <div className={s.posts}>\n      <h3>My posts</h3>\n      <PostReduxForm onSubmit={addPost}/>\n      {getPostData}\n    </div>\n  )\n});","import React from 'react';\nimport {AddPostAC, ProfilePageType} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/reduxStore\";\n\n\ntype MapStatePropsType = {\n  profilePage: ProfilePageType\n  newTextValue: string\n}\n\ntype MapDispatchPropsType = {\n  addPostCallback: (newTextValue: string) => void\n}\n\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    profilePage: state.profilePage,\n    newTextValue: state.profilePage.newTextValue\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n  return {\n    addPostCallback: (newTextValue: string) => {\n      dispatch(AddPostAC(newTextValue));\n    }\n  }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType, savePhoto} from \"../../redux/profileReducer\";\nimport {ProfileRequestType} from \"../../api/api\";\n\n\ntype ProfilePropsType = {\n  profile: ProfileType | null,\n  status: string,\n  updateStatus: (status: string) => void\n  saveProfile: (profile: ProfileRequestType) => Promise<any>\n  isOwner: boolean\n  savePhoto: (file: File) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n  return <>\n    <div>\n      <ProfileInfo profile={props.profile}\n                   status={props.status}\n                   updateStatus={props.updateStatus}\n                   saveProfile={props.saveProfile}\n                   isOwner={props.isOwner}\n                   savePhoto={props.savePhoto}\n      />\n      <MyPostsContainer/>\n    </div>\n  </>;\n};\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport {\n  getUserProfile,\n  getUserStatus,\n  ProfileType,\n  savePhoto,\n  saveProfile,\n  updateUserStatus\n} from \"../../redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport withAuthRedirect from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\nimport {ProfileRequestType} from \"../../api/api\";\n\n\ntype ParamsType = {\n  userId: string\n}\ntype MapStatePropsType = {\n  profile: ProfileType | null,\n  status: string,\n  userId: number | null,\n  isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n  getUserProfile: (userId: string) => void,\n  getUserStatus: (status: string) => void,\n  updateUserStatus: (status: string) => void\n  saveProfile: (profile: ProfileRequestType) => Promise<any>\n  savePhoto: (file: File) => void\n}\nexport type ProfilePagePropsType = RouteComponentProps<ParamsType> & MapStatePropsType & MapDispatchPropsType\n\nexport class ProfileContainer extends React.Component<ProfilePagePropsType> {\n\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = String(this.props.userId);\n      if (!userId) {\n        this.props.history.push('/login')\n      }\n    }\n    this.props.getUserProfile(userId)\n    this.props.getUserStatus(userId)\n  }\n\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: Readonly<ProfilePagePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n\n  render() {\n\n    return (\n      <Profile {...this.props}\n               profile={this.props.profile}\n               status={this.props.status}\n               updateStatus={this.props.updateUserStatus}\n               saveProfile={this.props.saveProfile}\n               isOwner={!this.props.match.params.userId}\n               savePhoto={this.props.savePhoto}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    userId: state.auth.id,\n    isAuth: state.auth.isAuth\n  }\n}\n\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, saveProfile, savePhoto}),\n  withRouter,\n  withAuthRedirect\n)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/reduxStore\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'login'}/>\n\n        return <Component {...restProps as T}/>;\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\nexport default withAuthRedirect;"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","value","onBlur","updateStatus","Contacts","contactValue","contactTitle","ProfileData","profile","isOwner","callback","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","ProfileDataFormRedux","reduxForm","form","handleSubmit","error","onSubmit","className","style","Field","placeholder","name","component","InputArea","validate","requiredField","type","ProfileInfo","saveProfile","savePhoto","React","s","src","photos","large","avatar","alt","target","files","length","console","log","initialValues","formData","then","Post","message","likes","maxLength","maxLengthCreator","PostReduxForm","TextArea","MyPosts","getPostData","profilePage","postData","ev","id","newTextValue","addPostCallback","text","MyPostsContainer","connect","state","dispatch","AddPostAC","Profile","ProfileContainer","userId","this","match","params","String","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","updateUserStatus","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}