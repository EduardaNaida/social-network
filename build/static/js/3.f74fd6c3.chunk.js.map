{"version":3,"file":"static/js/3.f74fd6c3.chunk.js","mappings":"8KACA,G,QAAA,CAAgB,QAAU,yBAAyB,WAAa,4BAA4B,SAAW,0BAA0B,OAAS,wBAAwB,OAAS,wBAAwB,YAAc,6BAA6B,YAAc,6BAA6B,OAAS,0B,mBCSrRA,EAAa,SAACC,GACvB,OACI,gBAAKC,UAAWC,EAAAA,OAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAIC,gBAAiBH,EAAAA,OAAtD,SAAiEF,EAAMM,UCRtEC,EAAU,SAACP,GACpB,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMQ,W,uCC8DvCC,GAAmBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,QAA/BD,EAjBsC,SAACV,GAC5D,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,gBAAKZ,UAAWC,EAAAA,YAAhB,UACI,SAACY,EAAA,EAAD,CAAOC,YAAa,qBACbC,UAAWC,EAAAA,GACXX,KAAM,OACNY,SAAU,CAACC,EAAAA,SAGtB,gBAAKlB,UAAWC,EAAAA,YAAhB,UACI,mBAAQD,UAAWC,EAAAA,OAAnB,0B,6BCzBhB,GAAekB,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAlBkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,WAAYF,EAAMC,YAAYC,eAGb,SAACC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,IAAWD,KAExBE,gBAAiB,SAACL,GACdC,GAASK,EAAAA,EAAAA,IAAWN,SAO5BO,EAAAA,EAFJ,ED3BuB,SAAC/B,GAEpB,IAAMgC,EAAShC,EAAMuB,YAAYU,YAAYC,KAAI,SAACC,EAAIC,GAClD,OACI,SAACrC,EAAD,CAAwBK,GAAI+B,EAAG/B,GAAIE,KAAM6B,EAAG7B,MAA3B8B,MAInB5B,EAAUR,EAAMuB,YAAYc,YAAYH,KAAI,SAACC,EAAIC,GACnD,OACI,SAAC7B,EAAD,CAAqBH,GAAI+B,EAAG/B,GAAII,QAAS2B,EAAG3B,SAA9B4B,MAStB,OAEI,iBAAKnC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,WAAhB,SACK8B,KAGL,iBAAK/B,UAAWC,EAAAA,SAAhB,WACI,yBAAMM,KACN,0BACI,SAACC,EAAD,CAAkBG,SAff,SAACY,GAChBxB,EAAM0B,WAAWF,EAAWG,qB,gGEhB9BW,EAAkB,SAAChB,GACrB,MAAO,CACHiB,OAAQjB,EAAMkB,KAAKD,SAc3B,IAXO,SAA6BE,GAQhC,OAAOpB,EAAAA,EAAAA,IAAQiB,EAARjB,EAPmB,SAACrB,GAEvB,IAAKuC,EAAwBvC,EAAxBuC,OAAWG,GAAhB,OAA6B1C,EAA7B,GACA,OAAKuC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItem\":\"Dialogs_dialogItem__Gr+yc\",\"messages\":\"Dialogs_messages__Cg2l+\",\"dialog\":\"Dialogs_dialog__htSTl\",\"active\":\"Dialogs_active__t8cjl\",\"sendMessage\":\"Dialogs_sendMessage__p+Z4w\",\"buttonBlock\":\"Dialogs_buttonBlock__y9HVh\",\"button\":\"Dialogs_button__8Qbmd\"};","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogsType = {\n    id: number\n    name: string\n}\n\n\nexport const DialogItem = (props: DialogsType) => {\n    return (\n        <div className={s.dialog}>\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {MessageData} from \"../../../redux/dialogsReducer\";\n\n\nexport const Message = (props: MessageData) => {\n    return <div className={s.message}>{props.message}</div>\n}","import React from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {requiredLength} from \"../../utils/validators/validators\";\nimport {TextArea} from \"../common/formControls/formControl\";\n\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    const dialog = props.dialogsPage.dialogsData.map((ev, index) => {\n        return (\n            <DialogItem key={index} id={ev.id} name={ev.name}/>\n        )\n    })\n\n    const message = props.dialogsPage.messageData.map((ev, index) => {\n        return (\n            <Message key={index} id={ev.id} message={ev.message}/>\n        )\n    })\n\n    const addMessage = (newMessage: FormDataType) => {\n        props.addMessage(newMessage.text);\n    }\n\n\n    return (\n\n        <div className={s.dialogs}>\n            <div className={s.dialogItem}>\n                {dialog}\n            </div>\n\n            <div className={s.messages}>\n                <div>{message}</div>\n                <div>\n                    <DialogsReduxForm onSubmit={addMessage}/>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\ntype FormDataType = {\n    text: string\n}\n\nconst DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.sendMessage}>\n                <Field placeholder={'Enter your message'}\n                       component={TextArea}\n                       name={'text'}\n                       validate={[requiredLength]}\n                ></Field>\n            </div>\n            <div className={s.buttonBlock}>\n                <button className={s.button}>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst DialogsReduxForm = reduxForm<FormDataType>({form: 'text'})(DialogsForm)","import React from 'react';\nimport {AddMessage, DialogsPageType, NewMessage} from \"../../redux/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport withAuthRedirect from \"../../hoc/WithAuthRedirect\";\n\ntype MapStatePropsType = {\n    dialogsPage: DialogsPageType\n    newMessage: string\n}\n\ntype MapDispatchPropsType = {\n    addMessage: (text: string) => void\n    onChangeMessage: (newMessage: string) => void\n}\n\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n        newMessage: state.dialogsPage.newMessage\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        addMessage: (text: string) => {\n            dispatch(AddMessage(text));\n        },\n        onChangeMessage: (newMessage: string) => {\n            dispatch(NewMessage(newMessage))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/reduxStore\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'login'}/>\n\n        return <Component {...restProps as T}/>;\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\nexport default withAuthRedirect;"],"names":["DialogItem","props","className","s","to","id","activeClassName","name","Message","message","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","requiredLength","compose","connect","state","dialogsPage","newMessage","dispatch","addMessage","text","AddMessage","onChangeMessage","NewMessage","withAuthRedirect","dialog","dialogsData","map","ev","index","messageData","mapStateToProps","isAuth","auth","Component","restProps"],"sourceRoot":""}